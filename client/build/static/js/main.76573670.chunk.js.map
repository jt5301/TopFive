{"version":3,"sources":["themes/theme.js","pages/SearchContext.js","pages/MovieCard.js","pages/Nominees.js","pages/NavbarSearch.js","pages/MovieDisplay.js","pages/Landing.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","fontSize","h1","palette","primary","main","SearchContext","createContext","SearchProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","searchTerm","setSearchTerm","_useState3","_useState4","nominees","setNominee","_useState5","_useState6","atLimit","setLimit","react_default","a","createElement","Provider","value","useStyles","makeStyles","root","display","justifyContent","cardGrid","paddingTop","spacing","paddingBottom","height","overflow","card","flexDirection","marginRight","marginLeft","cardMedia","cardContent","flexGrow","added","imdbLink","textDecoration","color","buttonContainer","MovieCard","props","classes","movie","nominated","setNominated","searchParam","useContext","limitWarning","setLimitWarning","addRemoveNominee","buttonMsg","objectSpread","defineProperty","imdbID","undefined","useEffect","localStorage","setItem","JSON","stringify","Grid","item","key","xs","Card","className","CardMedia","image","Poster","title","Title","CardContent","Typography","Year","inNominee","CardActions","onClick","event","Button","size","href","concat","Snackbar","open","autoHideDuration","onClose","message","heroContent","backgroundColor","background","paper","padding","Nominees","movieParam","instructions","setInstructions","movies","parse","getItem","stringMovies","console","log","noNominees","keys","forEach","current","Container","maxwidth","maxWidth","variant","align","paragraph","map","MovieCard_MovieCard","navContainer","border","borderRadius","logo","marginTop","NavbarSearch","search","setSearch","AppBar","position","Toolbar","component","gutterBottom","noWrap","onSubmit","preventDefault","submitSearch","TextField","InputProps","disableUnderline","id","placeholder","fullWidth","InputLabelProps","shrink","onChange","target","MovieDisplay","setMovies","nomineeComplete","setNomineeComplete","limitFive","_i","_nomineeKeys","length","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","toConsumableArray","data","Search","t0","stop","apply","this","arguments","defaultMovies","formattedQuery","i","_ref2","_callee2","_context2","getMovies","container","Landing","Fragment","SearchContext_SearchProvider","pages_NavbarSearch","pages_Nominees","pages_MovieDisplay","App","ThemeProvider","react_router_dom","react_router","path","LandingPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76573670.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Roboto\"',\n    fontSize: 12,\n    h1: {\n      // could customize the h1 variant as well\n    }\n  },\n  palette: {\n    primary: { main: \"#96bf48\" }\n  }\n});\n","import React, { createContext, useState } from \"react\";\n\nexport const SearchContext = createContext()\n\nexport const SearchProvider = ({ children }) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [nominees, setNominee] = useState({})\n  const [atLimit, setLimit] = useState(false)\n  return (\n    <SearchContext.Provider\n      value={{\n        searchTerm,\n        setSearchTerm,\n        nominees,\n        setNominee,\n        atLimit,\n        setLimit\n      }}>\n      {children}\n    </SearchContext.Provider>\n  )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { SearchContext } from './SearchContext'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n    height: '600px',\n    overflow: 'scroll'\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    marginRight: '10px',\n    marginLeft: '10px'\n  },\n  cardMedia: {\n    paddingTop: '100%',\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  added: {\n    display: 'flex',\n    justifyContent: 'center',\n    paddingBottom: '10px',\n  },\n  imdbLink: {\n    textDecoration: 'none',\n    color: theme.palette.primary.main\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}))\n\nexport const MovieCard = (props) => {\n  const classes = useStyles();\n  const movie = props.movie\n  const [nominated, setNominated] = useState(false)\n  let searchParam = useContext(SearchContext)\n  const [limitWarning, setLimitWarning] = useState(false)\n  const closeSnackbar = () => {\n    setLimitWarning(false)\n  }\n  const addRemoveNominee = () => {\n    if (props.buttonMsg === 'Remove') {\n      searchParam.setNominee({ ...searchParam.nominees, [movie.imdbID]: undefined })\n    }\n    if (searchParam.atLimit) {\n      setLimitWarning(true)\n      return\n    }\n    if (props.buttonMsg === 'Add Movie') {\n      searchParam.setNominee({ ...searchParam.nominees, [movie.imdbID]: movie })\n    }\n  }\n  useEffect(() => {\n    if (searchParam.nominees[movie.imdbID]) {\n      setNominated(true)\n    }\n    else {\n      setNominated(false)\n    }\n    localStorage.setItem('storedNominees', JSON.stringify(searchParam.nominees))\n  }, [searchParam.nominees])\n  return (\n    <Grid item key={movie.imdbID} xs={3}>\n      <Card className={classes.card}>\n        <CardMedia\n          className={classes.cardMedia}\n          image={movie.Poster}\n          title={movie.Title}\n        />\n        <CardContent className={classes.cardContent}>\n          <Typography>\n            {movie.Title}\n          </Typography>\n          <Typography>\n            {movie.Year}\n          </Typography>\n        </CardContent>\n        {props.inNominee ?\n          //first ternary to check if card is being used for nominee or for moviedisplay\n          <CardActions\n            onClick={(event) => addRemoveNominee(event)}\n            classes={{\n              root: classes.root\n            }}>\n            <Button size=\"small\" color=\"primary\">\n              {props.buttonMsg}\n            </Button>\n          </CardActions> : nominated ?\n            //second ternary to check if movie is in nomination, or should have buttons available to add / check imdb\n            <div className={classes.added}>\n              Added!\n         </div>\n            :\n            <div className={classes.buttonContainer}>\n              <CardActions\n                onClick={(event) => addRemoveNominee(event)}\n                classes={{\n                  root: classes.root\n                }}>\n                <Button size=\"small\" color=\"primary\">\n                  {props.buttonMsg}\n                </Button>\n              </CardActions>\n              <Button size=\"small\" color=\"primary\">\n                <a className={classes.imdbLink} href={`https://www.imdb.com/title/${movie.imdbID}/`}> IMDB Page</a>\n              </Button>\n            </div>\n        }\n      </Card>\n      <Snackbar\n        open={limitWarning}\n        autoHideDuration={4000}\n        onClose={closeSnackbar}\n        message=\"You can only nominate five. Remove a nominated movie first before adding another\"\n      ></Snackbar>\n    </Grid >\n  )\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SearchContext } from './SearchContext'\nimport { MovieCard } from './MovieCard.js'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  root: {\n    display: 'flex'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(6),\n    paddingBottom: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n}))\n\nconst Nominees = () => {\n  let movieParam = useContext(SearchContext)\n  const classes = useStyles();\n  const [instructions, setInstructions] = useState(true)\n  useEffect(() => {\n    const movies = JSON.parse(localStorage.getItem('storedNominees')) || \"\"\n    movieParam.setNominee(movies)\n    const stringMovies = JSON.stringify(movies)\n    localStorage.setItem('storedNominees', stringMovies)\n    console.log('hello')\n  }, [])\n  useEffect(() => {\n    let noNominees = true\n    Object.keys(movieParam.nominees).forEach((current) => {\n      if (movieParam.nominees[current]) noNominees = false\n    })\n    if (noNominees) setInstructions(true)\n    else setInstructions(false)\n  }, [movieParam.nominees])\n\n  return (\n    <heroContent>\n      <Container\n        className={classes.cardGrid} maxwidth='xl'\n        classes={{\n          root: classes.root\n        }} maxWidth=\"sm\">\n        {instructions ?\n          <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n            Your nominee list is empty! Use the search bar above to find and add up to five films that you think should be up for nomination. They'll be displayed here.\n          </Typography>\n          :\n          Object.keys(movieParam.nominees).map(\n            (current) => {\n              return (<MovieCard key={current} movie={movieParam.nominees[current]}\n                inNominee={true}\n                buttonMsg={'Remove'} />)\n            })}\n      </Container>\n\n    </heroContent>\n  )\n}\n\nexport default Nominees\n","import React, { useContext, useState } from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport { SearchContext } from './SearchContext'\nimport { makeStyles, } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  navContainer: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  root: {\n    border: '1px solid #e2e2e1',\n    borderRadius: 4,\n    backgroundColor: '#fcfcfb',\n  },\n  logo: {\n    marginTop: '18px'\n  }\n}))\n\nconst NavbarSearch = () => {\n  const classes = useStyles()\n  let searchTerm = useContext(SearchContext)\n  const [search, setSearch] = useState('')\n  const submitSearch = (event) => {\n    event.preventDefault()\n    searchTerm.setSearchTerm(search)\n  }\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar className={classes.navContainer} >\n        <Typography className={classes.logo} component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n          The Shoppies\n      </Typography>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          <form onSubmit={(event) => { submitSearch(event) }}>\n            <TextField InputProps={{ classes, disableUnderline: true }}\n              id=\"standard-full-width\"\n              // style={{ margin: 8 }}\n              placeholder=\"Title Keywords\"\n              fullWidth\n              // margin=\"normal\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(event) => setSearch(event.target.value)}\n            />\n          </form>\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default NavbarSearch\n","import React, { useContext, useEffect, useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SearchContext } from './SearchContext'\nimport axios from 'axios'\nimport { MovieCard } from './MovieCard.js'\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n    height: '750px',\n    overflow: 'scroll'\n  },\n}))\n\nconst MovieDisplay = () => {\n  const classes = useStyles();\n  let searchParam = useContext(SearchContext)\n  const [movies, setMovies] = useState([])\n  const [nomineeComplete, setNomineeComplete] = useState(false)\n\n  useEffect(() => {\n    let limitFive = 0\n    let nomineeKeys = Object.keys(searchParam.nominees)\n    for (let key of nomineeKeys) {\n      if (searchParam.nominees[key]) limitFive += 1\n      if (limitFive === 5) {\n        searchParam.setLimit(true)\n        setNomineeComplete(true)\n        break\n      }\n      else searchParam.setLimit(false)\n    }\n  }, [searchParam.nominees])\n\n  const closeSnackbar = () => {\n    setNomineeComplete(false)\n  }\n\n  useEffect(() => {\n    const defaultMovies = async () => {\n      try {\n        const res = await axios.get(`/movies/search/avengers`)\n        setMovies([...res.data.Search])\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    defaultMovies()\n  }, [])\n\n  useEffect(() => {\n    let formattedQuery = ''\n    for (let i = 0; i < searchParam.searchTerm.length; i++) {\n      if (searchParam.searchTerm[i] === ' ') formattedQuery += '+'\n      else formattedQuery += searchParam.searchTerm[i]\n    }\n    const getMovies = async () => {\n      try {\n        const res = await axios.get(`/movies/search/${formattedQuery}`)\n        setMovies([...res.data.Search])\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    getMovies()\n  }, [searchParam.searchTerm])\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"xl\">\n      <Grid container spacing={5}>\n        {movies.map((current) => {\n          return (<MovieCard key={current.imdbID} movie={current} buttonMsg={'Add Movie'} />)\n        })}\n      </Grid>\n      <Snackbar\n        open={nomineeComplete}\n        autoHideDuration={4000}\n        onClose={closeSnackbar}\n        message=\"Nomination Complete! Feel free to change your choices by removing a nominee to add a different one.\"\n      ></Snackbar>\n    </Container>\n  )\n}\n\nexport default MovieDisplay\n","import React from 'react';\nimport Nominees from './Nominees.js'\nimport NavbarSearch from './NavbarSearch.js'\nimport MovieDisplay from './MovieDisplay.js'\nimport { SearchProvider } from './SearchContext.js'\n\n\nexport default function Landing() {\n\n\n  return (\n    <React.Fragment>\n      <SearchProvider>\n        <NavbarSearch />\n        <Nominees />\n        <MovieDisplay />\n      </SearchProvider>\n\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport { theme } from \"./themes/theme\";\nimport LandingPage from \"./pages/Landing\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <BrowserRouter>\n        <Route path=\"/\" component={LandingPage} />\n      </BrowserRouter>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}